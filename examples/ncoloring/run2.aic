//
// 0. Init Graph
//
shell echo "\n*****asserting edges"
assert edge(1, 2)
assert edge(2, 3)
assert edge(3, 4)
assert edge(4, 1)
solve


//
// 1. Single argument ground query
//
shell echo "\n*****query mark(1,1)"
query mark(1,1)


// 
// 2. Boolean query + Assert/Retract
//
shell echo "\n*****query mark(1,1) & [ mark(3,2) | not mark(4,2)]"
query mark(1,1) & [ mark(3,2) | not mark(4,2)]

shell echo "\n*****assert edge(2,4)"
assert edge(2,4)

shell echo "\n*****query mark(1,1) & [ mark(3,2) | not mark(4,2)]"
query mark(1,1) & [ mark(3,2) | not mark(4,2)]

shell echo "\n*****open edge(2,4)"
open edge(2,4)

shell echo "\n*****query mark(1,1) & [ mark(3,2) | not mark(4,2)]"
query mark(1,1) & [ mark(3,2) | not mark(4,2)]

shell echo "\n*****retract edge(2,4)"
retract edge(2,4)

shell echo "\n*****query mark(1,1) & [ mark(3,2) | not mark(4,2)]"
query mark(1,1) & [ mark(3,2) | not mark(4,2)]


// 
// 3 . Boolean query + Assume/Cancel vs Assert/Retract
//
shell echo "\n*****assume not mark(2,3)"
assume not mark(2,3)

shell echo "\n*****query mark(1,1)"
query mark(1,1)

shell echo "\n*****query mark(1,1) & [ mark(3,2) | not mark(4,2)]"
query mark(1,1) & [ mark(3,2) | not mark(4,2)]

shell echo "\n*****cancel not mark(2,3)"
cancel not mark(2,3)


// 
// 4 . Boolean query + Define/Assert, sets imark equivalent to mark
//

shell echo "\n*****external mselect(X) : node(X)"
external mselect(X,C) : node(X), color(C)

shell echo "\n*****external mselect(X,C). ?"
define :- not mark(X,C),  mselect(X,C). ?

shell echo "\n*****assert mselect(2,3)"
assert mselect(2,3)

shell echo "\n*****query mark(1,1) & [ mark(3,2) | not mark(4,2)]"
query mark(1,1) & [ mark(3,2) | not mark(4,2)]

